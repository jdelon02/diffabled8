<?php

/**
 * @file
 * Hooks and helper functions.
 *
 * @todo Remove layout configuration on context on block delete.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\context\Entity\Context;

/**
 * Return default layout from configuration.
 *
 * @return string
 *   Layout ID of default layout.
 */
function _context_layout_layout_default() {
  /** @var \Drupal\context_layout\Plugin\ContextLayout\ContextLayoutManager $context_layout_manager */
  $context_layout_manager = Drupal::service('plugin.manager.context_layout');
  $fallback = TRUE;
  return $context_layout_manager->getDefaultLayout($fallback);
}

/**
 * Return select option friendly layouts.
 *
 * @return array
 *   Layout definition options.
 */
function _context_layout_layout_options() {
  /** @var \Drupal\context_layout\Plugin\ContextLayout\ContextLayoutManager $context_layout_manager */
  $context_layout_manager = Drupal::service('plugin.manager.context_layout');
  return $context_layout_manager->getLayoutOptions();
}

/**
 * Context edit form callback.
 *
 * @param array $form
 *   The form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function context_layout_form_context_edit_form_alter(array &$form, FormStateInterface $form_state) {
  // Add process callback to manage layout form ui.
  $form['reactions']['#process'][] = 'context_layout_context_edit_form_process';
  $form['actions']['submit']['#submit'][] = 'context_layout_form_context_edit_form_submit';
}

/**
 * Process function for layout UI.
 *
 * @param array $form
 *   The form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 *
 * @return array
 *   The form array.
 */
function context_layout_context_edit_form_process(array &$form, FormStateInterface $form_state) {
  // We only want to apply layout to the blocks reaction.
  if (empty($form['reaction-blocks'])) {
    return $form;
  }

  $context = Context::load($form_state->getValue('name'));
  $third_party_settings = $context->getThirdPartySettings('context_layout');

  $layout = NULL;
  $input = $form_state->getUserInput();

  if (!empty($input['reactions']['blocks']['theme'])) {
    $theme = $input['reactions']['blocks']['theme'];
  }

  else {
    $theme = array_keys($form['reaction-blocks']['options']['theme']['#options'])[0];
  }

  if (!empty($third_party_settings['layout'][$theme])) {
    $layout = $third_party_settings['layout'][$theme];
  }

  // Add layout select element.
  // @todo Investigate why '#value' changes frontend UI, but '#default_value' doesn't.
  $form['reaction-blocks']['options']['layout'] = [
    '#title' => t('Layout'),
    '#type' => 'select',
    '#empty_option' => '---',
    '#options' => _context_layout_layout_options(),
    '#value' => $layout,
  ];

  return $form;
}

/**
 * Context edit form submit handler.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function context_layout_form_context_edit_form_submit(array $form, FormStateInterface &$form_state) {
  // We only want to apply layout to the blocks reaction.
  if (empty($form['reactions']['reaction-blocks'])) {
    return;
  }

  // Use user input instead of value's until '#default_value' is used on layout
  // form element.
  $values = $form_state->getUserInput();

  $theme = $values['reactions']['blocks']['theme'];
  $layout = $values['reactions']['blocks']['layout'];

  $context = Context::load($form_state->getValue('name'));
  $third_party_settings = $context->getThirdPartySettings('context_layout');

  if (empty($layout)) {
    unset($third_party_settings['layout'][$theme]);
  }

  else {
    $third_party_settings['layout'][$theme] = $layout;
  }

  // Set layout configuration to context.
  $context->setThirdPartySetting('context_layout', 'layout', $third_party_settings['layout']);
  $context->save();
}
